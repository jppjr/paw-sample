#region Prolog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################


cControlPrefix = '';
If (pControl @= 'Y');
cControlPrefix = '}';
EndIf;

#*** Log File Name
cConfigDim = cControlPrefix | 'tp_config';
If (DimensionExists(cConfigDim) = 1);
	cGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');
Else;
	cGenerateLog = 'N';
EndIf;

cTM1Process = GetProcessName();
StringGlobalVariable('gPrologLog');
StringGlobalVariable('gEpilogLog');
StringGlobalVariable('gDataLog');

IF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');
vReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pGuid,
'pProcess', cTM1Process, 'pControl', pControl);
If (vReturnValue <> ProcessExitNormal());
	ProcessError;
EndIf;
Endif;

cPrologLog = gPrologLog;
cEpilogLog = gEpilogLog;
cDataLog = gDataLog;
cTM1Log = cPrologLog;

#*** Log Parameters
If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'Parameters:', pGuid, pAppID, pControl);
EndIf;

#*** 

If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'Check application');
EndIf;

cApplicationsDim = cControlPrefix |  'tp_applications';

If (DimensionExists(cApplicationsDim) = 0);
ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', 
'pGuid', pGuid, 
'pProcess', cTM1Process,
'pErrorCode', 'TI_DIM_NOT_EXIST', 
'pErrorDetails', cApplicationsDim, 
'pControl', pControl);

ProcessError;
EndIf;

If (DIMIX(cApplicationsDim, pAppId) = 0);
ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', 
'pGuid', pGuid, 
'pProcess', cTM1Process,
'pErrorCode', 'TI_NODE_NOT_EXIST',
'pErrorDetails', pAppId, 
'pControl', pControl);

ProcessError;
EndIf;

#*** 

#*** 
StringGlobalVariable('gApprovalDim');
StringGlobalVariable('gApprovalSubset');
StringGlobalVariable('gIsActive');

IF (gApprovalDim @= '' % gApprovalSubset @= '');
vReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pGuid,'pAppId', pAppId, 'pControl',  pControl);
If (vReturnValue <> ProcessExitNormal());
	ProcessError;
EndIf;
Endif;

cApprovalDim = gApprovalDim;
cApprovalSubset = gApprovalSubset;

If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, 'Approval Dimension: ' | cApprovalDim);
TextOutput(cTM1Log, 'Approval Subset: ' | cApprovalSubset);
EndIf;

cGroupDim = '}Groups';
cGroupDimSize = DIMSIZ(cGroupDim);

#*** Check cube

cPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;
cCellSecurityCube = '}CellSecurity_' | cPermissionCube;
If (CubeExists(cCellSecurityCube) = 0);
ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', 
'pGuid', pGuid, 
'pProcess', cTM1Process,
'pErrorCode', 'TI_CUBE_NOT_EXIST', 
'pErrorDetails', cCellSecurityCube, 
'pControl', pControl);

ProcessError;
EndIf;

#*** declare global variables
StringGlobalVariable('gMdxFindUserGroups');
StringGlobalVariable('gMdxFindNonUserGroups');

If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'Find application groups');
EndIf;
vMDX1 = '[' | cCellSecurityCube | '].([' | cControlPrefix | 'tp_permissions].[VIEW], [}Groups].CURRENTMEMBER) = "Read"';
vMDX2 = 'FILTER([' | gApprovalDim | '].MEMBERS, ' | vMDX1 | ')';
vMDX3 = 'FILTER([}Groups].MEMBERS, COUNT(' | vMDX2 | ') > 0)';
gMdxFindUserGroups = vMdx3;
vMDX4 = 'EXCEPT([}Groups].MEMBERS, ' | vMdx3 | ')';
gMdxFindNonUserGroups = vMDX4;

If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'MDX for application groups', gMdxFindUserGroups);
TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'MDX for non-application groups', gMdxFindNonUserGroups);
EndIf;

#*** No error

If (cGenerateLog @= 'Y');
TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'The end has been reached.');
EndIf;

#endregion