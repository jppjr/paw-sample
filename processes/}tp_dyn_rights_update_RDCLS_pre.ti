#region Prolog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################

#*** Log File Name
cConfigDim = '}tp_config';
If (DimensionExists(cConfigDim) = 1);
	cGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');
Else;
	cGenerateLog = 'N';
EndIf;

cTM1Process = GetProcessName();
StringGlobalVariable('gPrologLog');
StringGlobalVariable('gEpilogLog');
StringGlobalVariable('gDataLog');

IF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');
vReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,
'pProcess', cTM1Process, 'pControl', 'Y');
If (vReturnValue <> ProcessExitNormal());
	ProcessError;
EndIf;
Endif;

cPrologLog = gPrologLog;
cEpilogLog = gEpilogLog;
cDataLog = gDataLog;
cTM1Log = cPrologLog;

#*** Log Parameters

If (cGenerateLog @= 'Y');
	TextOutput(cTM1Log, TIMST(NOW, '\Y-\m-\d \h:\i:\s'), 'Parameters:',pExecutionId, pAppId, pCube);
EndIf;

#***
cIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;
cTaskSecurityCube = '}tp_task_security}' | pCube | '}' | pAppId;
cIMApplicationDim = '}tp_intermediate_security_applications';
cIMMeasures = '}tp_intermediate_security_measures';
cApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');
cVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');
cApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');

#**
IF (CubeExists(cIMRDCLSCube) >0);

#***Reset "Rights" field on Intermediate cell security cube based for this application only
IF (DIMIX(cIMApplicationDim, pAppId) >0);
	#check application subset that contains this application Id only
	vTempAppSubset = 'temp_app_' | pAppId;
	IF (SubsetExists(cIMApplicationDim, vTempAppSubset)=0);
		#Error;
	Endif;

	IF (pIncremental @<> 'Y');
		vAllView = 'tp_temp_RDCLS_view_' | pExecutionId;
		ViewCreate(cIMRDCLSCube, vAllView);
		ViewTitleDimensionSet(cIMRDCLSCube, vAllView, cIMApplicationDim);
		ViewSubsetAssign(cIMRDCLSCube, vAllView, cIMApplicationDim, vTempAppSubset);
		ViewZeroOut(cIMRDCLSCube, vAllView);
		ViewDestroy(cIMRDCLSCube, vAllView);

		vAllView = 'tp_temp_view_' | pExecutionId;
		ViewCreate(cTaskSecurityCube, vAllView);
		ViewZeroOut(cTaskSecurityCube, vAllView);
		ViewDestroy(cTaskSecurityCube, vAllView);
	Else;
		#group subset that contains changed groups only
		vTempGroupSubset = 'temp_group_' | pAppId;
		vGroupsControlDim = '}Groups';
		IF (SubsetExists(vGroupsControlDim, vTempGroupSubset)=0);
			#Error;
		Endif;

		vGroupView = 'tp_temp_group_view_'  | pExecutionId;
		ViewCreate(cIMRDCLSCube, vGroupView);
		ViewTitleDimensionSet(cIMRDCLSCube, vGroupView, vGroupsControlDim);
		ViewTitleDimensionSet(cIMRDCLSCube, vGroupView, cIMApplicationDim);
		ViewSubsetAssign(cIMRDCLSCube, vGroupView, vGroupsControlDim, vTempGroupSubset );
		ViewSubsetAssign(cIMRDCLSCube, vGroupView, cIMApplicationDim, vTempAppSubset);
		ViewZeroOut(cIMRDCLSCube, vGroupView);
		ViewDestroy(cIMRDCLSCube, vGroupView);

		vGroupView = 'tp_temp_group_view_'  | pExecutionId;
		ViewCreate(cTaskSecurityCube, vGroupView);
		ViewTitleDimensionSet(cTaskSecurityCube, vGroupView, vGroupsControlDim);
		ViewSubsetAssign(cTaskSecurityCube, vGroupView, vGroupsControlDim, vTempGroupSubset );
		ViewZeroOut(cTaskSecurityCube, vGroupView);
		ViewDestroy(cTaskSecurityCube, vGroupView);

	Endif;
Endif;

Endif;
#**


#endregion
#region Epilog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################

IF (CubeExists(cIMRDCLSCube) >0);
vDimensionElem1 = '';
vDimensionElem2 = '';
vDimensionElem3 = '';
vDimensionElem4 = '';
vDimensionElem5 = '';
vDimensionElem6 = '';
vDimensionElem7 = '';
vDimensionElem8 = '';
vDimensionElem9 = '';
vDimensionElem10 = '';

dimensionIndex = 1;
vNavigationDimFound = 0;
While (dimensionIndex > 0 ); 
	cCubeDimensionName = TABDIM(cIMRDCLSCube, dimensionIndex);
	If (cCubeDimensionName @= '');
		dimensionIndex = -1;
	Else;

		IF (cCubeDimensionName @<>cIMApplicationDim & 
			cCubeDimensionName @<> cIMMeasures & 
			cCubeDimensionName @<> '}Groups');
			vNavigationDimFound = vNavigationDimFound +1;

				IF (vNavigationDimFound = 1);
					vDimensionElem1 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 2);
					vDimensionElem2 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 3);
					vDimensionElem3 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 4);
					vDimensionElem4 =DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 5);
					vDimensionElem5 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 6);
					vDimensionElem6 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 7);
					vDimensionElem7 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 8);
					vDimensionElem8 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 9);
					vDimensionElem9 = DIMNM(cCubeDimensionName,1);
				Endif;

				IF (vNavigationDimFound = 10);
					vDimensionElem10 = DIMNM(cCubeDimensionName,1);
				Endif;

		Endif;

	EndIf;

	dimensionIndex = dimensionIndex + 1;
End;


vGroup = DIMNM('}Groups',1);
vApplication = 'all_applications';
vRights = 'Rights';

CellGetS(cIMRDCLSCube, vDimensionElem1, vGroup, vApplication, vRights);
Endif;

#endregion